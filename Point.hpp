#pragma once

#include <compare>
#include <ostream>

struct Point
{
    double x, y;
    // default comparisons generated by compiler
    // auto operator<=>(const Point &) const = default;
    // custom comparisons
    std::partial_ordering operator<=>(const Point &point) const
    {
        auto xRes = x <=> point.x;
        if (xRes == std::partial_ordering::equivalent)
        {
            return (y <=> point.y);
        }
        return xRes;
    }

    bool operator==(const Point &rhs) const { return (x == rhs.x) and (y == rhs.y); }
};

std::ostream &operator<<(std::ostream &os, const Point &point)
{
    os << "(" << point.x << ", " << point.y << ")";
    return os;
}
